diff --git a/dist/cli.cjs.dev.js b/dist/cli.cjs.dev.js
index b1582198d3d2631569ff59f27170354a932d3ad0..73ab02a861b1f5a8e1bf10984340a0a6b1518b15 100644
--- a/dist/cli.cjs.dev.js
+++ b/dist/cli.cjs.dev.js
@@ -842,7 +842,10 @@ async function internalPublish(pkgName, opts, twoFactorState) {
     code,
     stdout,
     stderr
-  } = await spawn__default['default'](publishTool.name, ["publish", opts.cwd, "--json", ...publishFlags], {
+  } = publishTool.name === "pnpm" ? await spawn__default['default']("pnpm", ["publish", "--json", ...publishFlags], {
+    env: Object.assign({}, process.env, envOverride),
+    cwd: opts.cwd
+  }) : await spawn__default['default'](publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
     env: Object.assign({}, process.env, envOverride)
   });
 
@@ -959,12 +962,11 @@ async function publishAPackage(pkg, access, twoFactorState, tag) {
     version,
     publishConfig
   } = pkg.packageJson;
-  const localAccess = publishConfig === null || publishConfig === void 0 ? void 0 : publishConfig.access;
   logger.info(`Publishing ${chalk__default['default'].cyan(`"${name}"`)} at ${chalk__default['default'].green(`"${version}"`)}`);
-  const publishDir = publishConfig !== null && publishConfig !== void 0 && publishConfig.directory ? path.join(pkg.dir, publishConfig.directory) : pkg.dir;
   const publishConfirmation = await publish(name, {
-    cwd: publishDir,
-    access: localAccess || access,
+    cwd: pkg.dir,
+    publishDir: publishConfig !== null && publishConfig !== void 0 && publishConfig.directory ? path.join(pkg.dir, publishConfig.directory) : pkg.dir,
+    access: (publishConfig === null || publishConfig === void 0 ? void 0 : publishConfig.access) || access,
     tag
   }, twoFactorState);
   return {
diff --git a/dist/cli.cjs.prod.js b/dist/cli.cjs.prod.js
index 5b1b7dd6439be4f0b721a17e683b1435c254f5b8..df283d36e08afdaf8ccbcb5ba07703d61d5ee922 100644
--- a/dist/cli.cjs.prod.js
+++ b/dist/cli.cjs.prod.js
@@ -476,7 +476,10 @@ async function internalPublish(pkgName, opts, twoFactorState) {
   const envOverride = {
     npm_config_registry: getCorrectRegistry()
   };
-  let {code: code, stdout: stdout, stderr: stderr} = await spawn__default.default(publishTool.name, [ "publish", opts.cwd, "--json", ...publishFlags ], {
+  let {code: code, stdout: stdout, stderr: stderr} = "pnpm" === publishTool.name ? await spawn__default.default("pnpm", [ "publish", "--json", ...publishFlags ], {
+    env: Object.assign({}, process.env, envOverride),
+    cwd: opts.cwd
+  }) : await spawn__default.default(publishTool.name, [ "publish", opts.publishDir, "--json", ...publishFlags ], {
     env: Object.assign({}, process.env, envOverride)
   });
   if (0 !== code) {
@@ -528,15 +531,15 @@ async function publishPackages({packages: packages, access: access, otp: otp, pr
 }
 
 async function publishAPackage(pkg, access, twoFactorState, tag) {
-  const {name: name, version: version, publishConfig: publishConfig} = pkg.packageJson, localAccess = null == publishConfig ? void 0 : publishConfig.access;
+  const {name: name, version: version, publishConfig: publishConfig} = pkg.packageJson;
   logger.info(`Publishing ${chalk__default.default.cyan(`"${name}"`)} at ${chalk__default.default.green(`"${version}"`)}`);
-  const publishDir = null != publishConfig && publishConfig.directory ? path.join(pkg.dir, publishConfig.directory) : pkg.dir;
   return {
     name: name,
     newVersion: version,
     published: (await publish(name, {
-      cwd: publishDir,
-      access: localAccess || access,
+      cwd: pkg.dir,
+      publishDir: null != publishConfig && publishConfig.directory ? path.join(pkg.dir, publishConfig.directory) : pkg.dir,
+      access: (null == publishConfig ? void 0 : publishConfig.access) || access,
       tag: tag
     }, twoFactorState)).published
   };
diff --git a/dist/cli.esm.js b/dist/cli.esm.js
index ced46d2520d4bff71b94e4023b1841373a55712b..86ab79a83f931608078afc5410cb7025c83fd921 100644
--- a/dist/cli.esm.js
+++ b/dist/cli.esm.js
@@ -819,7 +819,10 @@ async function internalPublish(pkgName, opts, twoFactorState) {
     code,
     stdout,
     stderr
-  } = await spawn$1(publishTool.name, ["publish", opts.cwd, "--json", ...publishFlags], {
+  } = publishTool.name === "pnpm" ? await spawn$1("pnpm", ["publish", "--json", ...publishFlags], {
+    env: Object.assign({}, process.env, envOverride),
+    cwd: opts.cwd
+  }) : await spawn$1(publishTool.name, ["publish", opts.publishDir, "--json", ...publishFlags], {
     env: Object.assign({}, process.env, envOverride)
   });
 
@@ -936,12 +939,11 @@ async function publishAPackage(pkg, access, twoFactorState, tag) {
     version,
     publishConfig
   } = pkg.packageJson;
-  const localAccess = publishConfig === null || publishConfig === void 0 ? void 0 : publishConfig.access;
   info(`Publishing ${chalk.cyan(`"${name}"`)} at ${chalk.green(`"${version}"`)}`);
-  const publishDir = publishConfig !== null && publishConfig !== void 0 && publishConfig.directory ? join(pkg.dir, publishConfig.directory) : pkg.dir;
   const publishConfirmation = await publish(name, {
-    cwd: publishDir,
-    access: localAccess || access,
+    cwd: pkg.dir,
+    publishDir: publishConfig !== null && publishConfig !== void 0 && publishConfig.directory ? join(pkg.dir, publishConfig.directory) : pkg.dir,
+    access: (publishConfig === null || publishConfig === void 0 ? void 0 : publishConfig.access) || access,
     tag
   }, twoFactorState);
   return {