import {buildSchema, Source} from 'graphql';
import {diff} from '../src/diff';
import {CheckConclusion} from '../src/types';

function getPrintedLine(source: Source, line: number): string {
  return source.body.split('\n')[line - 1].trim();
}

function build(oldSource: string, newSource: string) {
  const sources = {
    old: new Source(oldSource),
    new: new Source(newSource),
  };
  const schemas = {
    old: buildSchema(sources.old),
    new: buildSchema(sources.new),
  };

  return {
    sources,
    schemas,
  };
}

const newSchema = /* GraphQL */ `
  type Post {
    id: ID!
    title: String!
    createdAt: String!
  }

  type Query {
    post: Post!
  }
`;

const oldSchema = /* GraphQL */ `
  type Post {
    id: ID
    title: String @deprecated(reason: "No more used")
    createdAt: String
    modifiedAt: String
  }

  type Query {
    post: Post!
    posts: [Post!]
  }
`;

test('should return 7 annotations and 7 changes and fail the check', async () => {
  const action = await diff({
    path: 'schema.graphql',
    ...build(oldSchema, newSchema),
  });

  expect(action.annotations).toHaveLength(7);
  expect(action.changes).toHaveLength(7);
  expect(action.conclusion).toBe(CheckConclusion.Failure);
});

test('annotations should match lines in schema file', async () => {
  const {schemas, sources} = build(oldSchema, newSchema);
  const action = await diff({
    path: 'schema.graphql',
    schemas,
    sources,
  });

  // Field 'modifiedAt' was removed from object type 'Post'
  expect(getPrintedLine(sources.old, action.annotations![0].start_line)).toBe(
    'modifiedAt: String',
  );

  // Field 'Post.createdAt' changed type from 'String' to 'String!'
  expect(getPrintedLine(sources.new, action.annotations![5].start_line)).toBe(
    'createdAt: String!',
  );
});

test('should work with comments and descriptions', async () => {
  const {sources, schemas} = build(
    /* GraphQL */ `
      # This is an autogenerated file.
      # Please do not edit it directly.

      """
      Represents meta information about this service.
      """
      type Meta {
        """
        A short description of the service.
        """
        description: String!

        """
        Name of the service.
        """
        name: String!

        """
        Version number of the service.
        """
        version: String!
      }
    `,
    /* GraphQL */ `
      # This is an autogenerated file.
      # Please do not edit it directly.

      """
      Represents a user of the application.
      """
      type User {
        """
        The user's email.
        """
        email: String!

        """
        The user's first name.
        """
        firstName: String!

        """
        The user's last name.
        """
        lastName: String!

        """
        The user's phone number.
        """
        phoneNumber: String!

        """
        A URL pointing to the user's public avatar.
        """
        avatarURL: String!
      }

      """
      Represents meta information about this service.
      """
      type Meta {
        """
        A short description of the service.
        """
        description: String!

        """
        Name of the service.
        """
        name: String!
      }
    `,
  );

  const action = await diff({
    path: 'schema.graphql',
    schemas,
    sources,
  });

  expect(action.annotations).toHaveLength(2);

  // Type 'User' was added
  expect(getPrintedLine(sources.new, action.annotations![0].start_line)).toBe(
    'type User {',
  );
  // Field 'version' was removed from object type 'Meta'
  expect(getPrintedLine(sources.old, action.annotations![1].start_line)).toBe(
    'version: String!',
  );
});
